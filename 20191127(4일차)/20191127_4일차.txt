# 컴포넌트
	재사용 가능한 단위로서 화면에 표시할 HTML의 조각 템플릿으로 이해할 수 있다.
	ex) bootstrap에서의 재사용 가능한 class 단위들

## 컴포넌트의 기능

 - 데이터가 주어졌을 때 이에 맞추어 UI를 만들 수 있다.
 - 라이프사이클에 따른 특정 작업들을 처리할 수 있도록 할 수 있다.
	> 프로그램이 동작하기 위해 거쳐가는 일련의 함수 흐름
	> ex) 웹 페이지의 라이프사이클 : onload > (ready) > onbeforeunload > onunload
 - 임의 메서드(함수)를 만들어 특별한 기능을 붙여 줄 수 있다.
 
 
## 컴포넌트의 종류

### 1) 클래스 컴포넌트
 - 이후 배울 'state'기능 및 라이프사이클 기능을 사용할 수 있다.
 - 개발자가 임의로 메서드(=함수)를 정의할 수 있다.
 - 'render()' 함수가 꼭 있어야 하고, 그 안에서 보여 주어야 할 JSX를 반환해야 한다.
 
### 2) 함수형 컴포넌트
 - 클래스형 컴포넌트보다 선언하기가 훨씬 편하다.
 - 메모리 자원도 클래스형 컴포넌트보다 덜 사용한다.
 - 결과물의 파일 크기가 더 작다.
 - 함수형 컴포넌트는 리액트 vl6.8 업데이트 이후 Hook이라는 기능이 도입되면서 state 및 라이프사이클 기능을 사용할 수 있게 되었다.
	> 리액트 공식 레퍼런스에서는 함수형 컴포넌트의 사용을 더 권장하고 있다.


## 클래스의 이해
	함수와 변수들을 특정 용도에 따라 그룹화 하여 분류한 형태.
	
### 1) 예전 함수 처리 방식
	개별적으로 함수를 각자 구현했다.
	> 함수
	ex) function checkKor(){ ... }
		function checkEng(){ ... }
		function checkNumber(){ ... }
	
	> 클래스
	ex) function Check(){
		Check.prototype.kor = function() {....}
		Check.prototype.eng = function() {....}
		Check.prototype.number = function() {....}
	}
	
	위와 같은 형태로 정의된 함수의 군집을 클래스라고 한다.
	
	기능을 부여받은 변수를 객체라고 부른다.
	객체는 점(.)을 사용해서 자신에게 부여된 메서드들을 호출할 수 있다.
	myChecker.kor();
	myChecker.eng();
	myChecker.number();
	
	
	
	